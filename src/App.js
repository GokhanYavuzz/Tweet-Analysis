import React, { useState } from "react";
import "./App.css";

const fakeTweetDatabase = {
  "1798456712234567000": "Sabah kahvemi d√∂kt√ºm, sonra otob√ºs√º ka√ßƒ±rdƒ±m. Harika ba≈üladƒ±k!",
  "1798456712234567001": "Bug√ºn hava ≈üahane, dƒ±≈üarƒ± √ßƒ±kƒ±p y√ºr√ºy√º≈ü yapmak harikaydƒ±.",
  "1798456712234567002": "Yeni sezona ba≈üladƒ±m ama ilk b√∂l√ºm baya sarmadƒ± a√ßƒ±k√ßasƒ±.",
  "1798456712234567003": "K√ºt√ºphanede sessizce ders √ßalƒ±≈ümak ger√ßekten huzur veriyor.",
  "1798456712234567004": "Sƒ±navdan d√º≈ü√ºk aldƒ±m ama √∂nemli olan √∂ƒürenmek diyorum kendime.",
  "1798456712234567005": "Kargom yine kaybolmu≈ü. Bu ka√ßƒ±ncƒ± rezalet anlamƒ±yorum!",
  "1798456712234567006": "Karde≈üimle Monopoly oynayƒ±p 3 saat kavga ettik. üòÇ",
  "1798456712234567007": "Bug√ºn hi√ßbir ≈üey yapmadƒ±m ama nedense √ßok yorgunum.",
  "1798456712234567008": "Evde temizlik yapmak terapi gibi geliyor bazƒ± g√ºnler.",
  "1798456712234567009": "Kafam karƒ±≈üƒ±k ama yine de umutluyum. Her ≈üey yoluna girecek."
};

function App() {
  const [analysis, setAnalysis] = useState(null);
  const [loading, setLoading] = useState(false);
  const [tweetUrl, setTweetUrl] = useState("");
  const extractTweetId = (url) => {
    const match = url.match(/x\.com\/.*\/status\/(\d+)/);
    return match ? match[1] : null;
  };
  

  const handleSubmit = async (e) => {
    const AIRTABLE_TOKEN = process.env.REACT_APP_AIRTABLE_TOKEN;
    const tweetId = extractTweetId(tweetUrl);
    const fakeTweetContent = fakeTweetDatabase[tweetId] || "Bu tweetin i√ßeriƒüi bilinmiyor.";
    e.preventDefault();
    setLoading(true);

  if (!tweetId) {
    alert("Ge√ßerli bir tweet linki giriniz.");
    setLoading(false);
    return;
  }

  const prompt = `
    Tweet: "${fakeTweetContent}"
    L√ºtfen a≈üaƒüƒ±daki gibi cevap ver:

    √ñzet: (1 c√ºmlelik sade T√ºrk√ße √∂zet)
    Duygu: (yalnƒ±zca ≈üu √º√ß kelimeden biri: Olumlu, Olumsuz, N√∂tr)
    `;

    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;

    if (!API_KEY) {
      alert("API anahtarƒ± eksik! L√ºtfen .env dosyasƒ±nƒ± kontrol et.");
      setLoading(false);
      return;
    }
      
    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                parts: [{ text: prompt }],
              },
            ],
          }),
        }
      );

      const data = await response.json();
      console.log("Gemini Yanƒ±tƒ±:", data);

      const answer = data?.candidates?.[0]?.content?.parts?.[0]?.text;

      if (!answer) {
        alert("Yanƒ±t alƒ±namadƒ±. Yanƒ±t bo≈ü d√∂nd√º.");
        setLoading(false);
        return;
      }

      const cleanText = answer.replace(/\*\*/g, "");
      const lines = cleanText.split("\n").map(line => line.trim());

      let summaryLine = "";
      let sentimentLine = "";

      lines.forEach((line) => {
        if (line.toLowerCase().startsWith("√∂zet")) {
          summaryLine = line.replace(/^√∂zet[:\-]?\s*/i, "");
        } 
        else if (line.toLowerCase().startsWith("duygu")) {
          sentimentLine = line.replace(/^duygu[:\-]?\s*/i, "");
        }
});

      // 4. Analizi g√ºncelle
      setAnalysis({
        username: `@user${tweetId.slice(-4)}`,
        content: fakeTweetContent,
        summary: summaryLine || "Belirlenemedi",
        sentiment: sentimentLine || "Belirlenemedi",
        timestamp: new Date().toLocaleString(),
    });

    console.log("AIRTABLE_TOKEN:", AIRTABLE_TOKEN);
    console.log("G√∂nderilen veri:", {
     "Username": `@user${tweetId.slice(-4)}`,
     "Tweet ƒ∞√ßeriƒüi": fakeTweetContent,
     "√ñzet": summaryLine,
     "Duygu": sentimentLine,
     "Tarih ve Saat": new Date().toLocaleString()
    });

    const AIRTABLE_BASE_ID = process.env.REACT_APP_AIRTABLE_BASE_ID;
    console.log("Airtable Base ID:", AIRTABLE_BASE_ID);
    
    // Airtable tablolarƒ±nƒ± kontrol et
    const tablesResponse = await fetch(`https://api.airtable.com/v0/meta/bases/${AIRTABLE_BASE_ID}/tables`, {
      headers: {
        Authorization: `Bearer ${AIRTABLE_TOKEN}`
      }
    });
    const tablesData = await tablesResponse.json();
    console.log("Airtable Tablolar:", tablesData);

    const airtableResponse = await fetch(`https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/Tweet%20Analysis`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${AIRTABLE_TOKEN}`
      },
      body: JSON.stringify({
        fields: {
          "Username": `@user${tweetId.slice(-4)}`,
          "TweetContent": fakeTweetContent,
          "Summary": summaryLine,
          "Sentiment": sentimentLine,
          "Timestamp": new Date().toLocaleString()
        }
      })
    });

    
    const airtableData = await airtableResponse.json();
    console.log("üî∏ Airtable response:", airtableData);
    console.log("üî∏ Airtable status:", airtableResponse.status);
    } catch (err) {
      console.error("API Hatasƒ±:", err);
      alert("Bir hata olu≈ütu. Konsolu kontrol et.");
    }
    
    setLoading(false);
  };

  return (
    <div className="App" style={{ padding: "40px" }}>
      <h1>Tweet Analiz Otomatƒ±</h1>
      <div style={{ marginBottom: "20px" }}>
        <label><strong>Bir sahte tweet se√ßin:</strong></label><br />
        <select
          value={tweetUrl}
          onChange={(e) => setTweetUrl(e.target.value)}
          style={{ padding: "10px", width: "420px", marginTop: "5px" }}
        >
          <option value="" disabled>Tweet se√ßin</option>
          {Object.keys(fakeTweetDatabase).map((id) => (
            <option
              key={id}
              value={`https://x.com/testuser/status/${id}`}
            >
              Tweet #{id.slice(-3)} ‚Äî {fakeTweetDatabase[id].slice(0, 40)}...
            </option>
          ))}
        </select>
      </div>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          style={{ width: "400px", padding: "10px" }}
          value={tweetUrl}
          onChange={(e) => setTweetUrl(e.target.value)}
          placeholder="Tweet linkini girin"
          required
        />
        <br />
        <button type="submit" disabled={loading} style={{ marginTop: "10px" }}>
          {loading ? "Analiz ediliyor..." : "Analiz Et"}
        </button>
      </form>

      {analysis && (
        <div className={`analysis-card ${
          analysis.sentiment === "Olumlu" ? "positive" :
          analysis.sentiment === "Olumsuz" ? "negative" :
          analysis.sentiment === "N√∂tr" ? "neutral" : ""
        }`}>
          <h2>üîç Analiz Sonucu</h2>
          <p><strong>Kullanƒ±cƒ± Adƒ±:</strong> {analysis.username}</p>
          <p><strong>Tweet:</strong> {analysis.content}</p>
          <p><strong>√ñzet:</strong> {analysis.summary}</p>
          <p><strong>Duygu:</strong> {analysis.sentiment || "Belirlenemedi"}</p>
          <p><strong>Tarih:</strong> {analysis.timestamp}</p>
        </div>
      )}
    </div>
  );
}

export default App;
